
#include <iostream>
#include <string.h>
#include <vector>
/* Dynamic Programming C/C++ implementation of LCS problem */

using namespace std;
int max(int a, int b);

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
vector<char> lcs(char* X, char* Y, int m, int n)
{
    int L[m + 1][n + 1];
    int i, j;
    vector<char> list;

    /* Following steps build L[m+1][n+1] in bottom up fashion. Note
    that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
    for (i = 0; i <= m; i++) {
        for (j = 0; j <= n; j++) {
            if (i == 0 || j == 0){
                L[i][j] = 0;
            }

            else if (X[i - 1] == Y[j - 1]){
                L[i][j] = L[i - 1][j - 1] + 1;
                list.push_back(X[i-1]);
            }

            else{
                L[i][j] = max(L[i - 1][j], L[i][j - 1]);
            }
        }
    }

    /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
    return list;
}

/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a > b) ? a : b;
}

/* Driver program to test above function */
int main()
{
    char X[] = "GTAB";
    char Y[] = "GTAB";

    int m = strlen(X);
    int n = strlen(Y);

    //printf("Length of LCS is %d\n", lcs(X, Y, m, n));
    vector <char> LCS = lcs(X,Y,m,n);
    for (int i=0; i<LCS.size(); i++){
      cout<<LCS[i];
      if (i != (LCS.size()-1)){
        cout << ",";
      }
    }

    return 0;
}
